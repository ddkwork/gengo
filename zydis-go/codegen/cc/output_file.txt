typedef int rune;
 typedef int wint_t;
typedef int bool ;
typedef long LONG ;
typedef unsigned __int64 SIZE_T,*PSIZE_T;
typedef unsigned __int64 time_t;
typedef unsigned __int64 NTSTATUS;
typedef char * va_list;
typedef struct _LIST_ENTRY {
  struct _LIST_ENTRY *Flink;
  struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, PRLIST_ENTRY;
#pragma warning(disable: 4201)
typedef unsigned long long QWORD;
typedef unsigned __int64 UINT64, *PUINT64;
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef int INT;
typedef unsigned int UINT;
typedef unsigned int * PUINT;
typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;
typedef char CHAR;
typedef rune WCHAR;
typedef unsigned char UCHAR;
typedef unsigned short USHORT;
typedef unsigned long ULONG;
typedef UCHAR BOOLEAN;
typedef BOOLEAN * PBOOLEAN;
typedef signed char INT8, *PINT8;
typedef signed short INT16, *PINT16;
typedef signed int INT32, *PINT32;
typedef signed __int64 INT64, *PINT64;
typedef unsigned char UINT8, *PUINT8;
typedef unsigned short UINT16, *PUINT16;
typedef unsigned int UINT32, *PUINT32;
typedef unsigned __int64 UINT64, *PUINT64;
typedef struct GUEST_REGS
{
    UINT64 rax;
    UINT64 rcx;
    UINT64 rdx;
    UINT64 rbx;
    UINT64 rsp;
    UINT64 rbp;
    UINT64 rsi;
    UINT64 rdi;
    UINT64 r8;
    UINT64 r9;
    UINT64 r10;
    UINT64 r11;
    UINT64 r12;
    UINT64 r13;
    UINT64 r14;
    UINT64 r15;
} GUEST_REGS, *PGUEST_REGS;
typedef struct GUEST_EXTRA_REGISTERS
{
    UINT16 CS;
    UINT16 DS;
    UINT16 FS;
    UINT16 GS;
    UINT16 ES;
    UINT16 SS;
    UINT64 RFLAGS;
    UINT64 RIP;
} GUEST_EXTRA_REGISTERS, *PGUEST_EXTRA_REGISTERS;
typedef struct _SCRIPT_ENGINE_VARIABLES_LIST
{
    UINT64 * TempList;
    UINT64 * GlobalVariablesList;
    UINT64 * LocalVariablesList;
} SCRIPT_ENGINE_VARIABLES_LIST, *PSCRIPT_ENGINE_VARIABLES_LIST;
typedef struct _CR3_TYPE
{
    union
    {
        UINT64 Flags;
        struct
        {
            UINT64 Pcid : 12;
            UINT64 PageFrameNumber : 36;
            UINT64 Reserved1 : 12;
            UINT64 Reserved_2 : 3;
            UINT64 PcidInvalidate : 1;
        } Fields;
    };
} CR3_TYPE, *PCR3_TYPE;
typedef enum _DEBUGGEE_PAUSING_REASON
{
    DEBUGGEE_PAUSING_REASON_NOT_PAUSED = 0,
    DEBUGGEE_PAUSING_REASON_PAUSE,
    DEBUGGEE_PAUSING_REASON_REQUEST_FROM_DEBUGGER,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_STEPPED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_TRACKING_STEPPED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_SOFTWARE_BREAKPOINT_HIT,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_HARDWARE_DEBUG_REGISTER_HIT,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_CORE_SWITCHED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_PROCESS_SWITCHED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_THREAD_SWITCHED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_COMMAND_EXECUTION_FINISHED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_EVENT_TRIGGERED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_STARTING_MODULE_LOADED,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_GENERAL_DEBUG_BREAK,
    DEBUGGEE_PAUSING_REASON_DEBUGGEE_GENERAL_THREAD_INTERCEPTED,
    DEBUGGEE_PAUSING_REASON_HARDWARE_BASED_DEBUGGEE_GENERAL_BREAK,
} DEBUGGEE_PAUSING_REASON;
typedef enum _DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION
{
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_USER_MODE_PAUSE = 1,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_USER_MODE_DO_NOT_READ_ANY_PACKET,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_USER_MODE_DEBUGGER_VERSION,
    DEBUGGER_REMOTE_PACKET_PING_AND_SEND_SUPPORTED_VERSION,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_STEP,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CONTINUE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CLOSE_AND_UNLOAD_DEBUGGEE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CHANGE_CORE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_FLUSH_BUFFERS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CALLSTACK,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_TEST_QUERY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CHANGE_PROCESS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_MODE_CHANGE_THREAD,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_RUN_SCRIPT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_USER_INPUT_BUFFER,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SEARCH_QUERY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_REGISTER_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_ADD_ACTION_TO_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_QUERY_AND_MODIFY_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_READ_REGISTERS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_READ_MEMORY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_EDIT_MEMORY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_BP,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_LIST_OR_MODIFY_BREAKPOINTS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SYMBOL_RELOAD,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_QUERY_PA2VA_AND_VA2PA,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SYMBOL_QUERY_PTE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_SET_SHORT_CIRCUITING_STATE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_INJECT_PAGE_FAULT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_ON_VMX_ROOT_WRITE_REGISTER,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_NO_ACTION,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_STARTED,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_LOGGING_MECHANISM,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_PAUSED_AND_CURRENT_INSTRUCTION,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CHANGING_CORE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CHANGING_PROCESS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CHANGING_THREAD,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_RUNNING_SCRIPT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_FORMATS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_FLUSH,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_CALLSTACK,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_TEST_QUERY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_REGISTERING_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_ADDING_ACTION_TO_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_QUERY_AND_MODIFY_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_SHORT_CIRCUITING_EVENT,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_READING_REGISTERS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_READING_MEMORY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_EDITING_MEMORY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_BP,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_SHORT_CIRCUITING_STATE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_LIST_OR_MODIFY_BREAKPOINTS,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_UPDATE_SYMBOL_INFO,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RELOAD_SYMBOL_FINISHED,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RELOAD_SEARCH_QUERY,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_PTE,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_VA2PA_AND_PA2VA,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_BRINGING_PAGES_IN,
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION_DEBUGGEE_RESULT_OF_WRITE_REGISTER,
} DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION;
typedef enum _DEBUGGER_REMOTE_PACKET_TYPE
{
    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGER_TO_DEBUGGEE_EXECUTE_ON_VMX_ROOT = 1,
    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGER_TO_DEBUGGEE_EXECUTE_ON_USER_MODE = 2,
    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGEE_TO_DEBUGGER = 3,
    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGER_TO_DEBUGGEE_HARDWARE_LEVEL = 4,
    DEBUGGER_REMOTE_PACKET_TYPE_DEBUGGEE_TO_DEBUGGER_HARDWARE_LEVEL = 5,
} DEBUGGER_REMOTE_PACKET_TYPE;
typedef struct _DEBUGGER_REMOTE_PACKET
{
    BYTE Checksum;
    UINT64 Indicator;
    DEBUGGER_REMOTE_PACKET_TYPE TypeOfThePacket;
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION RequestedActionOfThePacket;
} DEBUGGER_REMOTE_PACKET, *PDEBUGGER_REMOTE_PACKET;
const unsigned char BuildDateTime[] = {
    ("Jul 10 2024"[7]),
    ("Jul 10 2024"[8]),
    ("Jul 10 2024"[9]),
    ("Jul 10 2024"[10]),
    '-',
    ((("Jul 10 2024"[0] == 'O') || ("Jul 10 2024"[0] == 'N') || ("Jul 10 2024"[0] == 'D')) ? '1' : '0'),
    ( (("Jul 10 2024"[0] == 'J' && "Jul 10 2024"[1] == 'a' && "Jul 10 2024"[2] == 'n')) ? '1' : (("Jul 10 2024"[0] == 'F')) ? '2' : (("Jul 10 2024"[0] == 'M' && "Jul 10 2024"[1] == 'a' && "Jul 10 2024"[2] == 'r')) ? '3' : (("Jul 10 2024"[0] == 'A' && "Jul 10 2024"[1] == 'p')) ? '4' : (("Jul 10 2024"[0] == 'M' && "Jul 10 2024"[1] == 'a' && "Jul 10 2024"[2] == 'y')) ? '5' : (("Jul 10 2024"[0] == 'J' && "Jul 10 2024"[1] == 'u' && "Jul 10 2024"[2] == 'n')) ? '6' : (("Jul 10 2024"[0] == 'J' && "Jul 10 2024"[1] == 'u' && "Jul 10 2024"[2] == 'l')) ? '7' : (("Jul 10 2024"[0] == 'A' && "Jul 10 2024"[1] == 'u')) ? '8' : (("Jul 10 2024"[0] == 'S')) ? '9' : (("Jul 10 2024"[0] == 'O')) ? '0' : (("Jul 10 2024"[0] == 'N')) ? '1' : (("Jul 10 2024"[0] == 'D')) ? '2' : '?'),
    '-',
    (("Jul 10 2024"[4] >= '0') ? ("Jul 10 2024"[4]) : '0'),
    ("Jul 10 2024"[5]),
    ' ',
    ("01:07:13"[0]),
    ("01:07:13"[1]),
    ':',
    ("01:07:13"[3]),
    ("01:07:13"[4]),
    ':',
    ("01:07:13"[6]),
    ("01:07:13"[7]),
    '\0'};
const unsigned char CompleteVersion[] = {
    'v',
    (0 + '0'),
    '.',
    (9 + '0'),
    '.',
    (1 + '0'),
    '\0'};
const unsigned char BuildVersion[] = {
    ("Jul 10 2024"[7]),
    ("Jul 10 2024"[8]),
    ("Jul 10 2024"[9]),
    ("Jul 10 2024"[10]),
    ((("Jul 10 2024"[0] == 'O') || ("Jul 10 2024"[0] == 'N') || ("Jul 10 2024"[0] == 'D')) ? '1' : '0'),
    ( (("Jul 10 2024"[0] == 'J' && "Jul 10 2024"[1] == 'a' && "Jul 10 2024"[2] == 'n')) ? '1' : (("Jul 10 2024"[0] == 'F')) ? '2' : (("Jul 10 2024"[0] == 'M' && "Jul 10 2024"[1] == 'a' && "Jul 10 2024"[2] == 'r')) ? '3' : (("Jul 10 2024"[0] == 'A' && "Jul 10 2024"[1] == 'p')) ? '4' : (("Jul 10 2024"[0] == 'M' && "Jul 10 2024"[1] == 'a' && "Jul 10 2024"[2] == 'y')) ? '5' : (("Jul 10 2024"[0] == 'J' && "Jul 10 2024"[1] == 'u' && "Jul 10 2024"[2] == 'n')) ? '6' : (("Jul 10 2024"[0] == 'J' && "Jul 10 2024"[1] == 'u' && "Jul 10 2024"[2] == 'l')) ? '7' : (("Jul 10 2024"[0] == 'A' && "Jul 10 2024"[1] == 'u')) ? '8' : (("Jul 10 2024"[0] == 'S')) ? '9' : (("Jul 10 2024"[0] == 'O')) ? '0' : (("Jul 10 2024"[0] == 'N')) ? '1' : (("Jul 10 2024"[0] == 'D')) ? '2' : '?'),
    (("Jul 10 2024"[4] >= '0') ? ("Jul 10 2024"[4]) : '0'),
    ("Jul 10 2024"[5]),
    '.',
    ("01:07:13"[0]),
    ("01:07:13"[1]),
    ("01:07:13"[3]),
    ("01:07:13"[4]),
    '\0'};
const unsigned char BuildSignature[] = {
    (0 + '0'),
    '.',
    (9 + '0'),
    '.',
    (1 + '0'),
    '-',
    ("Jul 10 2024"[7]),
    ("Jul 10 2024"[8]),
    ("Jul 10 2024"[9]),
    ("Jul 10 2024"[10]),
    ((("Jul 10 2024"[0] == 'O') || ("Jul 10 2024"[0] == 'N') || ("Jul 10 2024"[0] == 'D')) ? '1' : '0'),
    ( (("Jul 10 2024"[0] == 'J' && "Jul 10 2024"[1] == 'a' && "Jul 10 2024"[2] == 'n')) ? '1' : (("Jul 10 2024"[0] == 'F')) ? '2' : (("Jul 10 2024"[0] == 'M' && "Jul 10 2024"[1] == 'a' && "Jul 10 2024"[2] == 'r')) ? '3' : (("Jul 10 2024"[0] == 'A' && "Jul 10 2024"[1] == 'p')) ? '4' : (("Jul 10 2024"[0] == 'M' && "Jul 10 2024"[1] == 'a' && "Jul 10 2024"[2] == 'y')) ? '5' : (("Jul 10 2024"[0] == 'J' && "Jul 10 2024"[1] == 'u' && "Jul 10 2024"[2] == 'n')) ? '6' : (("Jul 10 2024"[0] == 'J' && "Jul 10 2024"[1] == 'u' && "Jul 10 2024"[2] == 'l')) ? '7' : (("Jul 10 2024"[0] == 'A' && "Jul 10 2024"[1] == 'u')) ? '8' : (("Jul 10 2024"[0] == 'S')) ? '9' : (("Jul 10 2024"[0] == 'O')) ? '0' : (("Jul 10 2024"[0] == 'N')) ? '1' : (("Jul 10 2024"[0] == 'D')) ? '2' : '?'),
    (("Jul 10 2024"[4] >= '0') ? ("Jul 10 2024"[4]) : '0'),
    ("Jul 10 2024"[5]),
    '.',
    ("01:07:13"[0]),
    ("01:07:13"[1]),
    ("01:07:13"[3]),
    ("01:07:13"[4]),
    '\0'};
typedef enum _PAGING_LEVEL
{
    PagingLevelPageTable = 0,
    PagingLevelPageDirectory,
    PagingLevelPageDirectoryPointerTable,
    PagingLevelPageMapLevel4
} PAGING_LEVEL;
typedef enum _POOL_ALLOCATION_INTENTION
{
    TRACKING_HOOKED_PAGES,
    EXEC_TRAMPOLINE,
    SPLIT_2MB_PAGING_TO_4KB_PAGE,
    DETOUR_HOOK_DETAILS,
    BREAKPOINT_DEFINITION_STRUCTURE,
    PROCESS_THREAD_HOLDER,
    INSTANT_REGULAR_EVENT_BUFFER,
    INSTANT_BIG_EVENT_BUFFER,
    INSTANT_REGULAR_EVENT_ACTION_BUFFER,
    INSTANT_BIG_EVENT_ACTION_BUFFER,
    INSTANT_REGULAR_SAFE_BUFFER_FOR_EVENTS,
    INSTANT_BIG_SAFE_BUFFER_FOR_EVENTS,
} POOL_ALLOCATION_INTENTION;
typedef enum _DEBUG_REGISTER_TYPE
{
    BREAK_ON_INSTRUCTION_FETCH,
    BREAK_ON_WRITE_ONLY,
    BREAK_ON_IO_READ_OR_WRITE_NOT_SUPPORTED,
    BREAK_ON_READ_AND_WRITE_BUT_NOT_FETCH
} DEBUG_REGISTER_TYPE;
typedef enum _VMX_EXECUTION_MODE
{
    VmxExecutionModeNonRoot = 0,
    VmxExecutionModeRoot = 1
} VMX_EXECUTION_MODE;
typedef enum _VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE
{
    VMM_CALLBACK_CALLING_STAGE_INVALID_EVENT_EMULATION = 0,
    VMM_CALLBACK_CALLING_STAGE_PRE_EVENT_EMULATION = 1,
    VMM_CALLBACK_CALLING_STAGE_POST_EVENT_EMULATION = 2,
    VMM_CALLBACK_CALLING_STAGE_ALL_EVENT_EMULATION = 3
} VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE;
typedef enum _DEBUGGER_THREAD_PROCESS_TRACING
{
    DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_INTERRUPTS_FOR_THREAD_CHANGE,
    DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_INTERRUPTS_FOR_PROCESS_CHANGE,
    DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_DEBUG_REGISTER_INTERCEPTION,
    DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_WAITING_FOR_MOV_CR3_VM_EXITS,
} DEBUGGER_THREAD_PROCESS_TRACING;
typedef int (*Callback)(const char * Text);
typedef struct _DEBUGGEE_USER_INPUT_PACKET
{
    UINT32 CommandLen;
    BOOLEAN IgnoreFinishedSignal;
    UINT32 Result;
} DEBUGGEE_USER_INPUT_PACKET, *PDEBUGGEE_USER_INPUT_PACKET;
typedef struct _DEBUGGEE_EVENT_AND_ACTION_HEADER_FOR_REMOTE_PACKET
{
    UINT32 Length;
} DEBUGGEE_EVENT_AND_ACTION_HEADER_FOR_REMOTE_PACKET,
    *PDEBUGGEE_EVENT_AND_ACTION_HEADER_FOR_REMOTE_PACKET;
typedef struct _DEBUGGER_PAUSE_PACKET_RECEIVED
{
    UINT32 Result;
} DEBUGGER_PAUSE_PACKET_RECEIVED, *PDEBUGGER_PAUSE_PACKET_RECEIVED;
typedef struct _DEBUGGER_TRIGGERED_EVENT_DETAILS
{
    UINT64 Tag;
    void* Context;
    VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE Stage;
} DEBUGGER_TRIGGERED_EVENT_DETAILS, *PDEBUGGER_TRIGGERED_EVENT_DETAILS;
typedef struct _DEBUGGEE_KD_PAUSED_PACKET
{
    UINT64 Rip;
    BOOLEAN IsProcessorOn32BitMode;
    BOOLEAN IgnoreDisassembling;
    DEBUGGEE_PAUSING_REASON PausingReason;
    ULONG CurrentCore;
    UINT64 EventTag;
    VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE EventCallingStage;
    UINT64 Rflags;
    BYTE InstructionBytesOnRip[16];
    UINT16 ReadInstructionLen;
} DEBUGGEE_KD_PAUSED_PACKET, *PDEBUGGEE_KD_PAUSED_PACKET;
typedef struct _DEBUGGEE_UD_PAUSED_PACKET
{
    UINT64 Rip;
    UINT64 ProcessDebuggingToken;
    BOOLEAN Is32Bit;
    DEBUGGEE_PAUSING_REASON PausingReason;
    UINT32 ProcessId;
    UINT32 ThreadId;
    UINT64 Rflags;
    UINT64 EventTag;
    VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE EventCallingStage;
    BYTE InstructionBytesOnRip[16];
    UINT16 ReadInstructionLen;
    GUEST_REGS GuestRegs;
} DEBUGGEE_UD_PAUSED_PACKET, *PDEBUGGEE_UD_PAUSED_PACKET;
typedef enum _NOTIFY_TYPE
{
    IRP_BASED,
    EVENT_BASED
} NOTIFY_TYPE;
typedef struct _DEBUGGEE_MESSAGE_PACKET
{
    UINT32 OperationCode;
    CHAR Message[4096];
} DEBUGGEE_MESSAGE_PACKET, *PDEBUGGEE_MESSAGE_PACKET;
typedef struct _REGISTER_NOTIFY_BUFFER
{
    NOTIFY_TYPE Type;
    void* hEvent;
} REGISTER_NOTIFY_BUFFER, *PREGISTER_NOTIFY_BUFFER;
typedef struct _DIRECT_VMCALL_PARAMETERS
{
    UINT64 OptionalParam1;
    UINT64 OptionalParam2;
    UINT64 OptionalParam3;
} DIRECT_VMCALL_PARAMETERS, *PDIRECT_VMCALL_PARAMETERS;
typedef enum _DEBUGGER_HOOK_MEMORY_TYPE
{
    DEBUGGER_MEMORY_HOOK_VIRTUAL_ADDRESS,
    DEBUGGER_MEMORY_HOOK_PHYSICAL_ADDRESS
} DEBUGGER_HOOK_MEMORY_TYPE;
typedef struct _EPT_HOOKS_CONTEXT
{
    UINT64 HookingTag;
    UINT64 PhysicalAddress;
    UINT64 VirtualAddress;
} EPT_HOOKS_CONTEXT, *PEPT_HOOKS_CONTEXT;
typedef struct _EPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR
{
    UINT64 StartAddress;
    UINT64 EndAddress;
    BOOLEAN SetHookForRead;
    BOOLEAN SetHookForWrite;
    BOOLEAN SetHookForExec;
    DEBUGGER_HOOK_MEMORY_TYPE MemoryType;
    UINT64 Tag;
} EPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR, *PEPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR;
typedef struct _EPT_HOOKS_ADDRESS_DETAILS_FOR_EPTHOOK2
{
    void* TargetAddress;
    void* HookFunction;
} EPT_HOOKS_ADDRESS_DETAILS_FOR_EPTHOOK2, *PEPT_HOOKS_ADDRESS_DETAILS_FOR_EPTHOOK2;
typedef struct _EPT_SINGLE_HOOK_UNHOOKING_DETAILS
{
    BOOLEAN CallerNeedsToRestoreEntryAndInvalidateEpt;
    BOOLEAN RemoveBreakpointInterception;
    SIZE_T PhysicalAddress;
    UINT64 OriginalEntry;
} EPT_SINGLE_HOOK_UNHOOKING_DETAILS, *PEPT_SINGLE_HOOK_UNHOOKING_DETAILS;
typedef union
{
    struct
    {
        UINT32 Type : 4;
        UINT32 DescriptorType : 1;
        UINT32 DescriptorPrivilegeLevel : 2;
        UINT32 Present : 1;
        UINT32 Reserved1 : 4;
        UINT32 AvailableBit : 1;
        UINT32 LongMode : 1;
        UINT32 DefaultBig : 1;
        UINT32 Granularity : 1;
        UINT32 Unusable : 1;
        UINT32 Reserved2 : 15;
    };
    UINT32 AsUInt;
} VMX_SEGMENT_ACCESS_RIGHTS_TYPE;
typedef struct _VMX_SEGMENT_SELECTOR
{
    UINT16 Selector;
    VMX_SEGMENT_ACCESS_RIGHTS_TYPE Attributes;
    UINT32 Limit;
    UINT64 Base;
} VMX_SEGMENT_SELECTOR, *PVMX_SEGMENT_SELECTOR;
typedef enum _EXCEPTION_VECTORS
{
    EXCEPTION_VECTOR_DIVIDE_ERROR,
    EXCEPTION_VECTOR_DEBUG_BREAKPOINT,
    EXCEPTION_VECTOR_NMI,
    EXCEPTION_VECTOR_BREAKPOINT,
    EXCEPTION_VECTOR_OVERFLOW,
    EXCEPTION_VECTOR_BOUND_RANGE_EXCEEDED,
    EXCEPTION_VECTOR_UNDEFINED_OPCODE,
    EXCEPTION_VECTOR_NO_MATH_COPROCESSOR,
    EXCEPTION_VECTOR_DOUBLE_FAULT,
    EXCEPTION_VECTOR_RESERVED0,
    EXCEPTION_VECTOR_INVALID_TASK_SEGMENT_SELECTOR,
    EXCEPTION_VECTOR_SEGMENT_NOT_PRESENT,
    EXCEPTION_VECTOR_STACK_SEGMENT_FAULT,
    EXCEPTION_VECTOR_GENERAL_PROTECTION_FAULT,
    EXCEPTION_VECTOR_PAGE_FAULT,
    EXCEPTION_VECTOR_RESERVED1,
    EXCEPTION_VECTOR_MATH_FAULT,
    EXCEPTION_VECTOR_ALIGNMENT_CHECK,
    EXCEPTION_VECTOR_MACHINE_CHECK,
    EXCEPTION_VECTOR_SIMD_FLOATING_POINT_NUMERIC_ERROR,
    EXCEPTION_VECTOR_VIRTUAL_EXCEPTION,
    EXCEPTION_VECTOR_RESERVED2,
    EXCEPTION_VECTOR_RESERVED3,
    EXCEPTION_VECTOR_RESERVED4,
    EXCEPTION_VECTOR_RESERVED5,
    EXCEPTION_VECTOR_RESERVED6,
    EXCEPTION_VECTOR_RESERVED7,
    EXCEPTION_VECTOR_RESERVED8,
    EXCEPTION_VECTOR_RESERVED9,
    EXCEPTION_VECTOR_RESERVED10,
    EXCEPTION_VECTOR_RESERVED11,
    EXCEPTION_VECTOR_RESERVED12,
    APC_INTERRUPT = 31,
    DPC_INTERRUPT = 47,
    CLOCK_INTERRUPT = 209,
    IPI_INTERRUPT = 225,
    PMI_INTERRUPT = 254,
} EXCEPTION_VECTORS;
typedef enum _VMM_CALLBACK_TRIGGERING_EVENT_STATUS_TYPE
{
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL_NO_INITIALIZED = 0,
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL = 0,
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL_IGNORE_EVENT = 1,
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_DEBUGGER_NOT_ENABLED = 2,
    VMM_CALLBACK_TRIGGERING_EVENT_STATUS_INVALID_EVENT_TYPE = 3,
} VMM_CALLBACK_TRIGGERING_EVENT_STATUS_TYPE;
typedef enum _VMM_EVENT_TYPE_ENUM
{
    HIDDEN_HOOK_READ_AND_WRITE_AND_EXECUTE,
    HIDDEN_HOOK_READ_AND_WRITE,
    HIDDEN_HOOK_READ_AND_EXECUTE,
    HIDDEN_HOOK_WRITE_AND_EXECUTE,
    HIDDEN_HOOK_READ,
    HIDDEN_HOOK_WRITE,
    HIDDEN_HOOK_EXECUTE,
    HIDDEN_HOOK_EXEC_DETOURS,
    HIDDEN_HOOK_EXEC_CC,
    SYSCALL_HOOK_EFER_SYSCALL,
    SYSCALL_HOOK_EFER_SYSRET,
    CPUID_INSTRUCTION_EXECUTION,
    RDMSR_INSTRUCTION_EXECUTION,
    WRMSR_INSTRUCTION_EXECUTION,
    IN_INSTRUCTION_EXECUTION,
    OUT_INSTRUCTION_EXECUTION,
    EXCEPTION_OCCURRED,
    EXTERNAL_INTERRUPT_OCCURRED,
    DEBUG_REGISTERS_ACCESSED,
    TSC_INSTRUCTION_EXECUTION,
    PMC_INSTRUCTION_EXECUTION,
    VMCALL_INSTRUCTION_EXECUTION,
    CONTROL_REGISTER_MODIFIED,
    CONTROL_REGISTER_READ,
    CONTROL_REGISTER_3_MODIFIED,
    TRAP_EXECUTION_MODE_CHANGED,
    TRAP_EXECUTION_INSTRUCTION_TRACE,
} VMM_EVENT_TYPE_ENUM;
typedef enum _DEBUGGER_EVENT_ACTION_TYPE_ENUM
{
    BREAK_TO_DEBUGGER,
    RUN_SCRIPT,
    RUN_CUSTOM_CODE
} DEBUGGER_EVENT_ACTION_TYPE_ENUM;
typedef enum _DEBUGGER_EVENT_SYSCALL_SYSRET_TYPE
{
    DEBUGGER_EVENT_SYSCALL_SYSRET_SAFE_ACCESS_MEMORY = 0,
    DEBUGGER_EVENT_SYSCALL_SYSRET_HANDLE_ALL_UD = 1,
} DEBUGGER_EVENT_SYSCALL_SYSRET_TYPE;
typedef enum _DEBUGGER_EVENT_MODE_TYPE
{
    DEBUGGER_EVENT_MODE_TYPE_USER_MODE_AND_KERNEL_MODE = 1,
    DEBUGGER_EVENT_MODE_TYPE_USER_MODE = 3,
    DEBUGGER_EVENT_MODE_TYPE_KERNEL_MODE = 0,
    DEBUGGER_EVENT_MODE_TYPE_INVALID = 0xffffffff,
} DEBUGGER_EVENT_MODE_TYPE;
typedef enum _DEBUGGER_EVENT_TRACE_TYPE
{
    DEBUGGER_EVENT_TRACE_TYPE_INVALID = 0,
    DEBUGGER_EVENT_TRACE_TYPE_STEP_IN = 1,
    DEBUGGER_EVENT_TRACE_TYPE_STEP_OUT = 2,
    DEBUGGER_EVENT_TRACE_TYPE_INSTRUMENTATION_STEP_IN = 3,
} DEBUGGER_EVENT_TRACE_TYPE;
typedef enum _DEBUGGER_MODIFY_EVENTS_TYPE
{
    DEBUGGER_MODIFY_EVENTS_QUERY_STATE,
    DEBUGGER_MODIFY_EVENTS_ENABLE,
    DEBUGGER_MODIFY_EVENTS_DISABLE,
    DEBUGGER_MODIFY_EVENTS_CLEAR,
} DEBUGGER_MODIFY_EVENTS_TYPE;
typedef struct _DEBUGGER_MODIFY_EVENTS
{
    UINT64 Tag;
    UINT64 KernelStatus;
    DEBUGGER_MODIFY_EVENTS_TYPE
    TypeOfAction;
    BOOLEAN IsEnabled;
} DEBUGGER_MODIFY_EVENTS, *PDEBUGGER_MODIFY_EVENTS;
typedef struct _DEBUGGER_SHORT_CIRCUITING_EVENT
{
    UINT64 KernelStatus;
    BOOLEAN IsShortCircuiting;
} DEBUGGER_SHORT_CIRCUITING_EVENT, *PDEBUGGER_SHORT_CIRCUITING_EVENT;
typedef struct _DEBUGGER_EVENT_OPTIONS
{
    UINT64 OptionalParam1;
    UINT64 OptionalParam2;
    UINT64 OptionalParam3;
    UINT64 OptionalParam4;
    UINT64 OptionalParam5;
    UINT64 OptionalParam6;
} DEBUGGER_EVENT_OPTIONS, *PDEBUGGER_EVENT_OPTIONS;
typedef enum _PROTECTED_HV_RESOURCES_PASSING_OVERS
{
    PASSING_OVER_NONE = 0,
    PASSING_OVER_UD_EXCEPTIONS_FOR_SYSCALL_SYSRET_HOOK = 1,
    PASSING_OVER_EXCEPTION_EVENTS,
    PASSING_OVER_INTERRUPT_EVENTS,
    PASSING_OVER_TSC_EVENTS,
    PASSING_OVER_MOV_TO_HW_DEBUG_REGS_EVENTS,
    PASSING_OVER_MOV_TO_CONTROL_REGS_EVENTS,
} PROTECTED_HV_RESOURCES_PASSING_OVERS;
typedef enum _PROTECTED_HV_RESOURCES_TYPE
{
    PROTECTED_HV_RESOURCES_EXCEPTION_BITMAP,
    PROTECTED_HV_RESOURCES_EXTERNAL_INTERRUPT_EXITING,
    PROTECTED_HV_RESOURCES_RDTSC_RDTSCP_EXITING,
    PROTECTED_HV_RESOURCES_MOV_TO_DEBUG_REGISTER_EXITING,
    PROTECTED_HV_RESOURCES_MOV_CONTROL_REGISTER_EXITING,
    PROTECTED_HV_RESOURCES_MOV_TO_CR3_EXITING,
} PROTECTED_HV_RESOURCES_TYPE;
typedef struct _DEBUGGER_GENERAL_EVENT_DETAIL
{
    LIST_ENTRY
    CommandsEventList;
    time_t CreationTime;
    UINT32 CoreId;
    UINT32 ProcessId;
    BOOLEAN IsEnabled;
    BOOLEAN EnableShortCircuiting;
    VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE EventStage;
    BOOLEAN HasCustomOutput;
    UINT64
    OutputSourceTags
        [0x5];
    UINT32 CountOfActions;
    UINT64 Tag;
    VMM_EVENT_TYPE_ENUM EventType;
    DEBUGGER_EVENT_OPTIONS Options;
    void* CommandStringBuffer;
    UINT32 ConditionBufferSize;
} DEBUGGER_GENERAL_EVENT_DETAIL, *PDEBUGGER_GENERAL_EVENT_DETAIL;
typedef struct _DEBUGGER_GENERAL_ACTION
{
    UINT64 EventTag;
    DEBUGGER_EVENT_ACTION_TYPE_ENUM ActionType;
    BOOLEAN ImmediateMessagePassing;
    UINT32 PreAllocatedBuffer;
    UINT32 CustomCodeBufferSize;
    UINT32 ScriptBufferSize;
    UINT32 ScriptBufferPointer;
} DEBUGGER_GENERAL_ACTION, *PDEBUGGER_GENERAL_ACTION;
typedef struct _DEBUGGER_EVENT_AND_ACTION_RESULT
{
    BOOLEAN IsSuccessful;
    UINT32 Error;
} DEBUGGER_EVENT_AND_ACTION_RESULT, *PDEBUGGER_EVENT_AND_ACTION_RESULT;
typedef enum _HWDBG_ACTION_ENUMS
{
    hwdbgActionSendInstanceInfo = 1,
    hwdbgActionConfigureScriptBuffer = 2,
} HWDBG_ACTION_ENUMS;
typedef enum _HWDBG_RESPONSE_ENUMS
{
    hwdbgResponseSuccessOrErrorMessage = 1,
    hwdbgResponseInstanceInfo = 2,
} HWDBG_RESPONSE_ENUMS;
typedef enum _HWDBG_SUCCESS_OR_ERROR_ENUMS
{
    hwdbgOperationWasSuccessful = 0x7FFFFFFF,
    hwdbgErrorInvalidPacket = 1,
} HWDBG_SUCCESS_OR_ERROR_ENUMS;
typedef struct _HWDBG_PORT_INFORMATION_ITEMS
{
    UINT32 PortSize;
} HWDBG_PORT_INFORMATION_ITEMS, *PHWDBG_PORT_INFORMATION_ITEMS;
#pragma pack(push, 4)
typedef struct _HWDBG_INSTANCE_INFORMATION
{
    UINT32 version;
    UINT32 maximumNumberOfStages;
    UINT32 scriptVariableLength;
    UINT32 numberOfSupportedLocalAndGlobalVariables;
    UINT32 numberOfSupportedTemporaryVariables;
    UINT32 maximumNumberOfSupportedGetScriptOperators;
    UINT32 maximumNumberOfSupportedSetScriptOperators;
    UINT32 sharedMemorySize;
    UINT32 debuggerAreaOffset;
    UINT32 debuggeeAreaOffset;
    UINT32 numberOfPins;
    UINT32 numberOfPorts;
    struct _HWDBG_SCRIPT_CAPABILITIES
    {
        UINT64 assign_local_global_var : 1;
        UINT64 assign_registers : 1;
        UINT64 assign_pseudo_registers : 1;
        UINT64 conditional_statements_and_comparison_operators : 1;
        UINT64 func_or : 1;
        UINT64 func_xor : 1;
        UINT64 func_and : 1;
        UINT64 func_asr : 1;
        UINT64 func_asl : 1;
        UINT64 func_add : 1;
        UINT64 func_sub : 1;
        UINT64 func_mul : 1;
        UINT64 func_div : 1;
        UINT64 func_mod : 1;
        UINT64 func_gt : 1;
        UINT64 func_lt : 1;
        UINT64 func_egt : 1;
        UINT64 func_elt : 1;
        UINT64 func_equal : 1;
        UINT64 func_neq : 1;
        UINT64 func_jmp : 1;
        UINT64 func_jz : 1;
        UINT64 func_jnz : 1;
        UINT64 func_mov : 1;
        UINT64 func_printf : 1;
    } scriptCapabilities;
    UINT32 bramAddrWidth;
    UINT32 bramDataWidth;
} HWDBG_INSTANCE_INFORMATION, *PHWDBG_INSTANCE_INFORMATION;
#pragma pack(pop)
typedef struct _HWDBG_SCRIPT_BUFFER
{
    UINT32 scriptNumberOfSymbols;
} HWDBG_SCRIPT_BUFFER, *PHWDBG_SCRIPT_BUFFER;
typedef struct _DEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS
{
    UINT64 VirtualAddress;
    UINT32 ProcessId;
    UINT64 Pml4eVirtualAddress;
    UINT64 Pml4eValue;
    UINT64 PdpteVirtualAddress;
    UINT64 PdpteValue;
    UINT64 PdeVirtualAddress;
    UINT64 PdeValue;
    UINT64 PteVirtualAddress;
    UINT64 PteValue;
    UINT32 KernelStatus;
} DEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS,
    *PDEBUGGER_READ_PAGE_TABLE_ENTRIES_DETAILS;
typedef struct _DEBUGGER_VA2PA_AND_PA2VA_COMMANDS
{
    UINT64 VirtualAddress;
    UINT64 PhysicalAddress;
    UINT32 ProcessId;
    BOOLEAN IsVirtual2Physical;
    UINT32 KernelStatus;
} DEBUGGER_VA2PA_AND_PA2VA_COMMANDS, *PDEBUGGER_VA2PA_AND_PA2VA_COMMANDS;
typedef struct _DEBUGGER_PAGE_IN_REQUEST
{
    UINT64 VirtualAddressFrom;
    UINT64 VirtualAddressTo;
    UINT32 ProcessId;
    UINT32 PageFaultErrorCode;
    UINT32 KernelStatus;
} DEBUGGER_PAGE_IN_REQUEST, *PDEBUGGER_PAGE_IN_REQUEST;
typedef enum _REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE
{
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE_UNKNOWN = 0,
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE_USER_MODE,
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE_KERNEL_MODE,
} REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE;
typedef enum _REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE
{
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE_UNKNOWN = 0,
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE_RECONSTRUCT,
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE_PATTERN,
} REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE;
typedef struct _REVERSING_MACHINE_RECONSTRUCT_MEMORY_REQUEST
{
    UINT32 ProcessId;
    UINT32 Size;
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_MODE Mode;
    REVERSING_MACHINE_RECONSTRUCT_MEMORY_TYPE Type;
    UINT32 KernelStatus;
} REVERSING_MACHINE_RECONSTRUCT_MEMORY_REQUEST, *PREVERSING_MACHINE_RECONSTRUCT_MEMORY_REQUEST;
typedef struct _DEBUGGER_DT_COMMAND_OPTIONS
{
    const char * TypeName;
    UINT64 SizeOfTypeName;
    UINT64 Address;
    BOOLEAN IsStruct;
    void* BufferAddress;
    UINT32 TargetPid;
    const char * AdditionalParameters;
} DEBUGGER_DT_COMMAND_OPTIONS, *PDEBUGGER_DT_COMMAND_OPTIONS;
typedef enum _DEBUGGER_PREALLOC_COMMAND_TYPE
{
    DEBUGGER_PREALLOC_COMMAND_TYPE_THREAD_INTERCEPTION,
    DEBUGGER_PREALLOC_COMMAND_TYPE_MONITOR,
    DEBUGGER_PREALLOC_COMMAND_TYPE_EPTHOOK,
    DEBUGGER_PREALLOC_COMMAND_TYPE_EPTHOOK2,
    DEBUGGER_PREALLOC_COMMAND_TYPE_REGULAR_EVENT,
    DEBUGGER_PREALLOC_COMMAND_TYPE_BIG_EVENT,
    DEBUGGER_PREALLOC_COMMAND_TYPE_REGULAR_SAFE_BUFFER,
    DEBUGGER_PREALLOC_COMMAND_TYPE_BIG_SAFE_BUFFER,
} DEBUGGER_PREALLOC_COMMAND_TYPE;
typedef struct _DEBUGGER_PREALLOC_COMMAND
{
    DEBUGGER_PREALLOC_COMMAND_TYPE Type;
    UINT32 Count;
    UINT32 KernelStatus;
} DEBUGGER_PREALLOC_COMMAND, *PDEBUGGER_PREALLOC_COMMAND;
typedef enum _DEBUGGER_PREACTIVATE_COMMAND_TYPE
{
    DEBUGGER_PREACTIVATE_COMMAND_TYPE_MODE,
} DEBUGGER_PREACTIVATE_COMMAND_TYPE;
typedef struct _DEBUGGER_PREACTIVATE_COMMAND
{
    DEBUGGER_PREACTIVATE_COMMAND_TYPE Type;
    UINT32 KernelStatus;
} DEBUGGER_PREACTIVATE_COMMAND, *PDEBUGGER_PREACTIVATE_COMMAND;
typedef enum _DEBUGGER_READ_READING_TYPE
{
    READ_FROM_KERNEL,
    READ_FROM_VMX_ROOT
} DEBUGGER_READ_READING_TYPE;
typedef enum _DEBUGGER_READ_MEMORY_TYPE
{
    DEBUGGER_READ_PHYSICAL_ADDRESS,
    DEBUGGER_READ_VIRTUAL_ADDRESS
} DEBUGGER_READ_MEMORY_TYPE;
typedef enum _DEBUGGER_READ_MEMORY_ADDRESS_MODE
{
    DEBUGGER_READ_ADDRESS_MODE_32_BIT,
    DEBUGGER_READ_ADDRESS_MODE_64_BIT
} DEBUGGER_READ_MEMORY_ADDRESS_MODE;
typedef enum _DEBUGGER_SHOW_MEMORY_STYLE
{
    DEBUGGER_SHOW_COMMAND_DT = 1,
    DEBUGGER_SHOW_COMMAND_DISASSEMBLE64,
    DEBUGGER_SHOW_COMMAND_DISASSEMBLE32,
    DEBUGGER_SHOW_COMMAND_DB,
    DEBUGGER_SHOW_COMMAND_DC,
    DEBUGGER_SHOW_COMMAND_DQ,
    DEBUGGER_SHOW_COMMAND_DD,
    DEBUGGER_SHOW_COMMAND_DUMP
} DEBUGGER_SHOW_MEMORY_STYLE;
typedef struct _DEBUGGER_READ_MEMORY
{
    UINT32 Pid;
    UINT64 Address;
    UINT32 Size;
    BOOLEAN GetAddressMode;
    DEBUGGER_READ_MEMORY_ADDRESS_MODE AddressMode;
    DEBUGGER_READ_MEMORY_TYPE MemoryType;
    DEBUGGER_READ_READING_TYPE ReadingType;
    UINT32 ReturnLength;
    UINT32 KernelStatus;
} DEBUGGER_READ_MEMORY, *PDEBUGGER_READ_MEMORY;
typedef struct _DEBUGGER_FLUSH_LOGGING_BUFFERS
{
    UINT32 KernelStatus;
    UINT32 CountOfMessagesThatSetAsReadFromVmxRoot;
    UINT32 CountOfMessagesThatSetAsReadFromVmxNonRoot;
} DEBUGGER_FLUSH_LOGGING_BUFFERS, *PDEBUGGER_FLUSH_LOGGING_BUFFERS;
typedef enum _DEBUGGER_TEST_QUERY_STATE
{
    TEST_QUERY_HALTING_CORE_STATUS = 1,
    TEST_QUERY_PREALLOCATED_POOL_STATE = 2,
    TEST_QUERY_TRAP_STATE = 3,
    TEST_BREAKPOINT_TURN_OFF_BPS = 4,
    TEST_BREAKPOINT_TURN_ON_BPS = 5,
    TEST_BREAKPOINT_TURN_OFF_BPS_AND_EVENTS_FOR_COMMANDS_IN_REMOTE_COMPUTER = 6,
    TEST_BREAKPOINT_TURN_ON_BPS_AND_EVENTS_FOR_COMMANDS_IN_REMOTE_COMPUTER = 7,
    TEST_SETTING_TARGET_TASKS_ON_HALTED_CORES_SYNCHRONOUS = 8,
    TEST_SETTING_TARGET_TASKS_ON_HALTED_CORES_ASYNCHRONOUS = 9,
    TEST_SETTING_TARGET_TASKS_ON_TARGET_HALTED_CORES = 10,
    TEST_BREAKPOINT_TURN_OFF_DBS = 11,
    TEST_BREAKPOINT_TURN_ON_DBS = 12,
} DEBUGGER_TEST_QUERY_STATE;
typedef struct _DEBUGGER_DEBUGGER_TEST_QUERY_BUFFER
{
    DEBUGGER_TEST_QUERY_STATE RequestType;
    UINT64 Context;
    UINT32 KernelStatus;
} DEBUGGER_DEBUGGER_TEST_QUERY_BUFFER, *PDEBUGGER_DEBUGGER_TEST_QUERY_BUFFER;
typedef struct _DEBUGGER_PERFORM_KERNEL_TESTS
{
    UINT32 KernelStatus;
} DEBUGGER_PERFORM_KERNEL_TESTS, *PDEBUGGER_PERFORM_KERNEL_TESTS;
typedef struct _DEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL
{
    UINT32 KernelStatus;
} DEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL,
    *PDEBUGGER_SEND_COMMAND_EXECUTION_FINISHED_SIGNAL;
typedef struct _DEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER
{
    DEBUGGER_REMOTE_PACKET_REQUESTED_ACTION RequestedAction;
    UINT32 LengthOfBuffer;
    BOOLEAN PauseDebuggeeWhenSent;
    UINT32 KernelResult;
} DEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER,
    *PDEBUGGEE_SEND_GENERAL_PACKET_FROM_DEBUGGEE_TO_DEBUGGER;
typedef struct _DEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER
{
    UINT32 KernelStatus;
    UINT32 Length;
} DEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER,
    *PDEBUGGER_SEND_USERMODE_MESSAGES_TO_DEBUGGER;
typedef enum _DEBUGGER_MSR_ACTION_TYPE
{
    DEBUGGER_MSR_READ,
    DEBUGGER_MSR_WRITE
} DEBUGGER_MSR_ACTION_TYPE;
typedef struct _DEBUGGER_READ_AND_WRITE_ON_MSR
{
    UINT64 Msr;
    UINT32 CoreNumber;
    DEBUGGER_MSR_ACTION_TYPE
    ActionType;
    UINT64 Value;
} DEBUGGER_READ_AND_WRITE_ON_MSR, *PDEBUGGER_READ_AND_WRITE_ON_MSR;
typedef enum _DEBUGGER_EDIT_MEMORY_TYPE
{
    EDIT_PHYSICAL_MEMORY,
    EDIT_VIRTUAL_MEMORY
} DEBUGGER_EDIT_MEMORY_TYPE;
typedef enum _DEBUGGER_EDIT_MEMORY_BYTE_SIZE
{
    EDIT_BYTE,
    EDIT_DWORD,
    EDIT_QWORD
} DEBUGGER_EDIT_MEMORY_BYTE_SIZE;
typedef struct _DEBUGGER_EDIT_MEMORY
{
    UINT32 Result;
    UINT64 Address;
    UINT32 ProcessId;
    DEBUGGER_EDIT_MEMORY_TYPE MemoryType;
    DEBUGGER_EDIT_MEMORY_BYTE_SIZE ByteSize;
    UINT32 CountOf64Chunks;
    UINT32 FinalStructureSize;
    UINT32 KernelStatus;
} DEBUGGER_EDIT_MEMORY, *PDEBUGGER_EDIT_MEMORY;
typedef enum _DEBUGGER_SEARCH_MEMORY_TYPE
{
    SEARCH_PHYSICAL_MEMORY,
    SEARCH_VIRTUAL_MEMORY,
    SEARCH_PHYSICAL_FROM_VIRTUAL_MEMORY,
} DEBUGGER_SEARCH_MEMORY_TYPE;
typedef enum _DEBUGGER_SEARCH_MEMORY_BYTE_SIZE
{
    SEARCH_BYTE,
    SEARCH_DWORD,
    SEARCH_QWORD
} DEBUGGER_SEARCH_MEMORY_BYTE_SIZE;
typedef struct _DEBUGGER_SEARCH_MEMORY
{
    UINT64 Address;
    UINT64 Length;
    UINT32 ProcessId;
    DEBUGGER_SEARCH_MEMORY_TYPE MemoryType;
    DEBUGGER_SEARCH_MEMORY_BYTE_SIZE ByteSize;
    UINT32 CountOf64Chunks;
    UINT32 FinalStructureSize;
} DEBUGGER_SEARCH_MEMORY, *PDEBUGGER_SEARCH_MEMORY;
typedef struct _DEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE
{
    BOOLEAN IsHide;
    UINT64 CpuidAverage;
    UINT64 CpuidStandardDeviation;
    UINT64 CpuidMedian;
    UINT64 RdtscAverage;
    UINT64 RdtscStandardDeviation;
    UINT64 RdtscMedian;
    BOOLEAN TrueIfProcessIdAndFalseIfProcessName;
    UINT32 ProcId;
    UINT32 LengthOfProcessName;
    UINT64 KernelStatus;
} DEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE,
    *PDEBUGGER_HIDE_AND_TRANSPARENT_DEBUGGER_MODE;
typedef struct _DEBUGGER_PREPARE_DEBUGGEE
{
    UINT32 PortAddress;
    UINT32 Baudrate;
    UINT64 NtoskrnlBaseAddress;
    UINT32 Result;
    CHAR OsName[256];
} DEBUGGER_PREPARE_DEBUGGEE, *PDEBUGGER_PREPARE_DEBUGGEE;
typedef struct _DEBUGGEE_CHANGE_CORE_PACKET
{
    UINT32 NewCore;
    UINT32 Result;
} DEBUGGEE_CHANGE_CORE_PACKET, *PDEBUGGEE_CHANGE_CORE_PACKET;
typedef enum _DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_TYPE
{
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_ATTACH,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_DETACH,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_REMOVE_HOOKS,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_KILL_PROCESS,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_PAUSE_PROCESS,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_SWITCH_BY_PROCESS_OR_THREAD,
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_QUERY_COUNT_OF_ACTIVE_DEBUGGING_THREADS,
} DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_TYPE;
typedef struct _DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS
{
    BOOLEAN IsStartingNewProcess;
    UINT32 ProcessId;
    UINT32 ThreadId;
    BOOLEAN CheckCallbackAtFirstInstruction;
    BOOLEAN Is32Bit;
    BOOLEAN IsPaused;
    DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS_ACTION_TYPE Action;
    UINT32 CountOfActiveDebuggingThreadsAndProcesses;
    UINT64 Token;
    UINT64 Result;
} DEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS,
    *PDEBUGGER_ATTACH_DETACH_USER_MODE_PROCESS;
typedef enum _DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES
{
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_PROCESS_COUNT = 1,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_THREAD_COUNT = 2,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_PROCESS_LIST = 3,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_THREAD_LIST = 4,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_CURRENT_PROCESS = 5,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_QUERY_CURRENT_THREAD = 6,
} DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES;
typedef enum _DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS
{
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_SHOW_INSTANTLY = 1,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_QUERY_COUNT = 2,
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTION_QUERY_SAVE_DETAILS = 3,
} DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS;
typedef struct _DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS
{
    UINT64 PsActiveProcessHead;
    ULONG ImageFileNameOffset;
    ULONG UniquePidOffset;
    ULONG ActiveProcessLinksOffset;
} DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS, *PDEBUGGEE_PROCESS_LIST_NEEDED_DETAILS;
typedef struct _DEBUGGEE_THREAD_LIST_NEEDED_DETAILS
{
    UINT32 ThreadListHeadOffset;
    UINT32 ThreadListEntryOffset;
    UINT32 CidOffset;
    UINT64 PsActiveProcessHead;
    ULONG ActiveProcessLinksOffset;
    UINT64 Process;
} DEBUGGEE_THREAD_LIST_NEEDED_DETAILS, *PDEBUGGEE_THREAD_LIST_NEEDED_DETAILS;
typedef struct _DEBUGGEE_PROCESS_LIST_DETAILS_ENTRY
{
    UINT64 Eprocess;
    UINT32 ProcessId;
    UINT64 Cr3;
    UCHAR ImageFileName[15 + 1];
} DEBUGGEE_PROCESS_LIST_DETAILS_ENTRY, *PDEBUGGEE_PROCESS_LIST_DETAILS_ENTRY;
typedef struct _DEBUGGEE_THREAD_LIST_DETAILS_ENTRY
{
    UINT64 Eprocess;
    UINT64 Ethread;
    UINT32 ProcessId;
    UINT32 ThreadId;
    UCHAR ImageFileName[15 + 1];
} DEBUGGEE_THREAD_LIST_DETAILS_ENTRY, *PDEBUGGEE_THREAD_LIST_DETAILS_ENTRY;
typedef struct _DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS
{
    DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS ProcessListNeededDetails;
    DEBUGGEE_THREAD_LIST_NEEDED_DETAILS ThreadListNeededDetails;
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_TYPES QueryType;
    DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS_ACTIONS QueryAction;
    UINT32 Count;
    UINT64 Result;
} DEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS,
    *PDEBUGGER_QUERY_ACTIVE_PROCESSES_OR_THREADS;
typedef struct _DEBUGGER_SINGLE_CALLSTACK_FRAME
{
    BOOLEAN IsStackAddressValid;
    BOOLEAN IsValidAddress;
    BOOLEAN IsExecutable;
    UINT64 Value;
    BYTE InstructionBytesOnRip[7];
} DEBUGGER_SINGLE_CALLSTACK_FRAME, *PDEBUGGER_SINGLE_CALLSTACK_FRAME;
typedef enum _DEBUGGER_CALLSTACK_DISPLAY_METHOD
{
    DEBUGGER_CALLSTACK_DISPLAY_METHOD_WITHOUT_PARAMS,
    DEBUGGER_CALLSTACK_DISPLAY_METHOD_WITH_PARAMS,
} DEBUGGER_CALLSTACK_DISPLAY_METHOD;
typedef struct _DEBUGGER_CALLSTACK_REQUEST
{
    BOOLEAN Is32Bit;
    UINT32 KernelStatus;
    DEBUGGER_CALLSTACK_DISPLAY_METHOD DisplayMethod;
    UINT32 Size;
    UINT32 FrameCount;
    UINT64 BaseAddress;
    UINT64 BufferSize;
} DEBUGGER_CALLSTACK_REQUEST, *PDEBUGGER_CALLSTACK_REQUEST;
typedef struct _USERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS
{
    UINT32 ProcessId;
    UINT32 ThreadId;
    BOOLEAN IsProcess;
} USERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS, *PUSERMODE_DEBUGGING_THREAD_OR_PROCESS_STATE_DETAILS;
typedef struct _DEBUGGER_EVENT_ACTION_RUN_SCRIPT_CONFIGURATION
{
    UINT64 ScriptBuffer;
    UINT32 ScriptLength;
    UINT32 ScriptPointer;
    UINT32 OptionalRequestedBufferSize;
} DEBUGGER_EVENT_ACTION_RUN_SCRIPT_CONFIGURATION,
    *PDEBUGGER_EVENT_ACTION_RUN_SCRIPT_CONFIGURATION;
typedef struct _DEBUGGER_EVENT_REQUEST_BUFFER
{
    BOOLEAN EnabledRequestBuffer;
    UINT32 RequestBufferSize;
    UINT64 RequstBufferAddress;
} DEBUGGER_EVENT_REQUEST_BUFFER, *PDEBUGGER_EVENT_REQUEST_BUFFER;
typedef struct _DEBUGGER_EVENT_REQUEST_CUSTOM_CODE
{
    UINT32 CustomCodeBufferSize;
    void* CustomCodeBufferAddress;
    UINT32 OptionalRequestedBufferSize;
} DEBUGGER_EVENT_REQUEST_CUSTOM_CODE, *PDEBUGGER_EVENT_REQUEST_CUSTOM_CODE;
typedef enum _DEBUGGER_UD_COMMAND_ACTION_TYPE
{
    DEBUGGER_UD_COMMAND_ACTION_TYPE_NONE = 0,
    DEBUGGER_UD_COMMAND_ACTION_TYPE_PAUSE,
    DEBUGGER_UD_COMMAND_ACTION_TYPE_CONTINUE,
    DEBUGGER_UD_COMMAND_ACTION_TYPE_REGULAR_STEP,
} DEBUGGER_UD_COMMAND_ACTION_TYPE;
typedef struct _DEBUGGER_UD_COMMAND_ACTION
{
    DEBUGGER_UD_COMMAND_ACTION_TYPE ActionType;
    UINT64 OptionalParam1;
    UINT64 OptionalParam2;
    UINT64 OptionalParam3;
    UINT64 OptionalParam4;
} DEBUGGER_UD_COMMAND_ACTION, *PDEBUGGER_UD_COMMAND_ACTION;
typedef struct _DEBUGGER_UD_COMMAND_PACKET
{
    DEBUGGER_UD_COMMAND_ACTION UdAction;
    UINT64 ProcessDebuggingDetailToken;
    UINT32 TargetThreadId;
    BOOLEAN ApplyToAllPausedThreads;
    UINT32 Result;
} DEBUGGER_UD_COMMAND_PACKET, *PDEBUGGER_UD_COMMAND_PACKET;
typedef enum _DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_TYPE
{
    DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_GET_PROCESS_DETAILS,
    DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_GET_PROCESS_LIST,
    DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PERFORM_SWITCH,
} DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_TYPE;
typedef struct _DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET
{
    DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_TYPE ActionType;
    UINT32 ProcessId;
    UINT64 Process;
    BOOLEAN IsSwitchByClkIntr;
    UCHAR ProcessName[16];
    DEBUGGEE_PROCESS_LIST_NEEDED_DETAILS ProcessListSymDetails;
    UINT32 Result;
} DEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET, *PDEBUGGEE_DETAILS_AND_SWITCH_PROCESS_PACKET;
typedef enum _DEBUGGEE_DETAILS_AND_SWITCH_THREAD_TYPE
{
    DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PERFORM_SWITCH,
    DEBUGGEE_DETAILS_AND_SWITCH_THREAD_GET_THREAD_DETAILS,
    DEBUGGEE_DETAILS_AND_SWITCH_THREAD_GET_THREAD_LIST,
} DEBUGGEE_DETAILS_AND_SWITCH_THREAD_TYPE;
typedef struct _DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET
{
    DEBUGGEE_DETAILS_AND_SWITCH_THREAD_TYPE ActionType;
    UINT32 ThreadId;
    UINT32 ProcessId;
    UINT64 Thread;
    UINT64 Process;
    BOOLEAN CheckByClockInterrupt;
    UCHAR ProcessName[16];
    DEBUGGEE_THREAD_LIST_NEEDED_DETAILS ThreadListSymDetails;
    UINT32 Result;
} DEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET, *PDEBUGGEE_DETAILS_AND_SWITCH_THREAD_PACKET;
typedef enum _DEBUGGER_REMOTE_STEPPING_REQUEST
{
    DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_IN,
    DEBUGGER_REMOTE_STEPPING_REQUEST_INSTRUMENTATION_STEP_IN,
    DEBUGGER_REMOTE_STEPPING_REQUEST_INSTRUMENTATION_STEP_IN_FOR_TRACKING,
    DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER,
    DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER_FOR_GU,
    DEBUGGER_REMOTE_STEPPING_REQUEST_STEP_OVER_FOR_GU_LAST_INSTRUCTION,
} DEBUGGER_REMOTE_STEPPING_REQUEST;
typedef struct _DEBUGGEE_STEP_PACKET
{
    DEBUGGER_REMOTE_STEPPING_REQUEST StepType;
    BOOLEAN IsCurrentInstructionACall;
    UINT32 CallLength;
} DEBUGGEE_STEP_PACKET, *PDEBUGGEE_STEP_PACKET;
typedef struct _DEBUGGEE_FORMATS_PACKET
{
    UINT64 Value;
    UINT32 Result;
} DEBUGGEE_FORMATS_PACKET, *PDEBUGGEE_FORMATS_PACKET;
typedef struct _DEBUGGEE_SYMBOL_REQUEST_PACKET
{
    UINT32 ProcessId;
} DEBUGGEE_SYMBOL_REQUEST_PACKET, *PDEBUGGEE_SYMBOL_REQUEST_PACKET;
typedef struct _DEBUGGEE_BP_PACKET
{
    UINT64 Address;
    UINT32 Pid;
    UINT32 Tid;
    UINT32 Core;
    BOOLEAN RemoveAfterHit;
    BOOLEAN CheckForCallbacks;
    UINT32 Result;
} DEBUGGEE_BP_PACKET, *PDEBUGGEE_BP_PACKET;
typedef enum _DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST
{
    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_LIST_BREAKPOINTS,
    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_ENABLE,
    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_DISABLE,
    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST_CLEAR,
} DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST;
typedef struct _DEBUGGEE_BP_LIST_OR_MODIFY_PACKET
{
    UINT64 BreakpointId;
    DEBUGGEE_BREAKPOINT_MODIFICATION_REQUEST Request;
    UINT32 Result;
} DEBUGGEE_BP_LIST_OR_MODIFY_PACKET, *PDEBUGGEE_BP_LIST_OR_MODIFY_PACKET;
typedef enum _DEBUGGER_CONDITIONAL_JUMP_STATUS
{
    DEBUGGER_CONDITIONAL_JUMP_STATUS_ERROR = 0,
    DEBUGGER_CONDITIONAL_JUMP_STATUS_NOT_CONDITIONAL_JUMP,
    DEBUGGER_CONDITIONAL_JUMP_STATUS_JUMP_IS_TAKEN,
    DEBUGGER_CONDITIONAL_JUMP_STATUS_JUMP_IS_NOT_TAKEN,
} DEBUGGER_CONDITIONAL_JUMP_STATUS;
typedef struct _DEBUGGEE_SCRIPT_PACKET
{
    UINT32 ScriptBufferSize;
    UINT32 ScriptBufferPointer;
    BOOLEAN IsFormat;
    UINT32 Result;
} DEBUGGEE_SCRIPT_PACKET, *PDEBUGGEE_SCRIPT_PACKET;
typedef struct _DEBUGGEE_RESULT_OF_SEARCH_PACKET
{
    UINT32 CountOfResults;
    UINT32 Result;
} DEBUGGEE_RESULT_OF_SEARCH_PACKET, *PDEBUGGEE_RESULT_OF_SEARCH_PACKET;
typedef struct _DEBUGGEE_REGISTER_READ_DESCRIPTION
{
    UINT32 RegisterId;
    UINT64 Value;
    UINT32 KernelStatus;
} DEBUGGEE_REGISTER_READ_DESCRIPTION, *PDEBUGGEE_REGISTER_READ_DESCRIPTION;
typedef struct _DEBUGGEE_REGISTER_WRITE_DESCRIPTION
{
    UINT32 RegisterId;
    UINT64 Value;
    UINT32 KernelStatus;
} DEBUGGEE_REGISTER_WRITE_DESCRIPTION, *PDEBUGGEE_REGISTER_WRITE_DESCRIPTION;
typedef struct SYMBOL
{
    long long unsigned Type;
    long long unsigned Len;
    long long unsigned VariableType;
    long long unsigned Value;
} SYMBOL, *PSYMBOL;
typedef struct HWDBG_SHORT_SYMBOL
{
    long long unsigned Type;
    long long unsigned Value;
} HWDBG_SHORT_SYMBOL, *PHWDBG_SHORT_SYMBOL;
typedef struct SYMBOL_BUFFER {
    PSYMBOL Head;
    unsigned int Pointer;
    unsigned int Size;
    char* Message;
} SYMBOL_BUFFER, * PSYMBOL_BUFFER;
typedef struct SYMBOL_MAP
{
    char* Name;
    long long unsigned Type;
} SYMBOL_MAP, * PSYMBOL_MAP;
typedef struct ACTION_BUFFER {
  long long unsigned Tag;
  long long unsigned CurrentAction;
  char ImmediatelySendTheResults;
  long long unsigned Context;
  char CallingStage;
} ACTION_BUFFER, *PACTION_BUFFER;
typedef enum REGS_ENUM {
 REGISTER_RAX = 0,
 REGISTER_EAX = 1,
 REGISTER_AX = 2,
 REGISTER_AH = 3,
 REGISTER_AL = 4,
 REGISTER_RCX = 5,
 REGISTER_ECX = 6,
 REGISTER_CX = 7,
 REGISTER_CH = 8,
 REGISTER_CL = 9,
 REGISTER_RDX = 10,
 REGISTER_EDX = 11,
 REGISTER_DX = 12,
 REGISTER_DH = 13,
 REGISTER_DL = 14,
 REGISTER_RBX = 15,
 REGISTER_EBX = 16,
 REGISTER_BX = 17,
 REGISTER_BH = 18,
 REGISTER_BL = 19,
 REGISTER_RSP = 20,
 REGISTER_ESP = 21,
 REGISTER_SP = 22,
 REGISTER_SPL = 23,
 REGISTER_RBP = 24,
 REGISTER_EBP = 25,
 REGISTER_BP = 26,
 REGISTER_BPL = 27,
 REGISTER_RSI = 28,
 REGISTER_ESI = 29,
 REGISTER_SI = 30,
 REGISTER_SIL = 31,
 REGISTER_RDI = 32,
 REGISTER_EDI = 33,
 REGISTER_DI = 34,
 REGISTER_DIL = 35,
 REGISTER_R8 = 36,
 REGISTER_R8D = 37,
 REGISTER_R8W = 38,
 REGISTER_R8H = 39,
 REGISTER_R8L = 40,
 REGISTER_R9 = 41,
 REGISTER_R9D = 42,
 REGISTER_R9W = 43,
 REGISTER_R9H = 44,
 REGISTER_R9L = 45,
 REGISTER_R10 = 46,
 REGISTER_R10D = 47,
 REGISTER_R10W = 48,
 REGISTER_R10H = 49,
 REGISTER_R10L = 50,
 REGISTER_R11 = 51,
 REGISTER_R11D = 52,
 REGISTER_R11W = 53,
 REGISTER_R11H = 54,
 REGISTER_R11L = 55,
 REGISTER_R12 = 56,
 REGISTER_R12D = 57,
 REGISTER_R12W = 58,
 REGISTER_R12H = 59,
 REGISTER_R12L = 60,
 REGISTER_R13 = 61,
 REGISTER_R13D = 62,
 REGISTER_R13W = 63,
 REGISTER_R13H = 64,
 REGISTER_R13L = 65,
 REGISTER_R14 = 66,
 REGISTER_R14D = 67,
 REGISTER_R14W = 68,
 REGISTER_R14H = 69,
 REGISTER_R14L = 70,
 REGISTER_R15 = 71,
 REGISTER_R15D = 72,
 REGISTER_R15W = 73,
 REGISTER_R15H = 74,
 REGISTER_R15L = 75,
 REGISTER_DS = 76,
 REGISTER_ES = 77,
 REGISTER_FS = 78,
 REGISTER_GS = 79,
 REGISTER_CS = 80,
 REGISTER_SS = 81,
 REGISTER_RFLAGS = 82,
 REGISTER_EFLAGS = 83,
 REGISTER_FLAGS = 84,
 REGISTER_CF = 85,
 REGISTER_PF = 86,
 REGISTER_AF = 87,
 REGISTER_ZF = 88,
 REGISTER_SF = 89,
 REGISTER_TF = 90,
 REGISTER_IF = 91,
 REGISTER_DF = 92,
 REGISTER_OF = 93,
 REGISTER_IOPL = 94,
 REGISTER_NT = 95,
 REGISTER_RF = 96,
 REGISTER_VM = 97,
 REGISTER_AC = 98,
 REGISTER_VIF = 99,
 REGISTER_VIP = 100,
 REGISTER_ID = 101,
 REGISTER_RIP = 102,
 REGISTER_EIP = 103,
 REGISTER_IP = 104,
 REGISTER_IDTR = 105,
 REGISTER_LDTR = 106,
 REGISTER_GDTR = 107,
 REGISTER_TR = 108,
 REGISTER_CR0 = 109,
 REGISTER_CR2 = 110,
 REGISTER_CR3 = 111,
 REGISTER_CR4 = 112,
 REGISTER_CR8 = 113,
 REGISTER_DR0 = 114,
 REGISTER_DR1 = 115,
 REGISTER_DR2 = 116,
 REGISTER_DR3 = 117,
 REGISTER_DR6 = 118,
 REGISTER_DR7 = 119
} REGS_ENUM;
static const char *const RegistersNames[] = {
"rax", "eax", "ax", "ah", "al", "rcx", "ecx", "cx",
"ch", "cl", "rdx", "edx", "dx", "dh", "dl", "rbx",
"ebx", "bx", "bh", "bl", "rsp", "esp", "sp", "spl",
"rbp", "ebp", "bp", "bpl", "rsi", "esi", "si", "sil",
"rdi", "edi", "di", "dil", "r8", "r8d", "r8w", "r8h",
"r8l", "r9", "r9d", "r9w", "r9h", "r9l", "r10", "r10d",
"r10w", "r10h", "r10l", "r11", "r11d", "r11w", "r11h", "r11l",
"r12", "r12d", "r12w", "r12h", "r12l", "r13", "r13d", "r13w",
"r13h", "r13l", "r14", "r14d", "r14w", "r14h", "r14l", "r15",
"r15d", "r15w", "r15h", "r15l", "ds", "es", "fs", "gs",
"cs", "ss", "rflags", "eflags", "flags", "cf", "pf", "af",
"zf", "sf", "tf", "if", "df", "of", "iopl", "nt",
"rf", "vm", "ac", "vif", "vip", "id", "rip", "eip",
"ip", "idtr", "ldtr", "gdtr", "tr", "cr0", "cr2", "cr3",
"cr4", "cr8", "dr0", "dr1", "dr2", "dr3", "dr6", "dr7"
};
typedef struct _MODULE_SYMBOL_DETAIL
{
    BOOLEAN IsSymbolDetailsFound;
    BOOLEAN IsLocalSymbolPath;
    BOOLEAN IsSymbolPDBAvaliable;
    BOOLEAN IsUserMode;
    BOOLEAN Is32Bit;
    UINT64 BaseAddress;
    char FilePath[260];
    char ModuleSymbolPath[260];
    char ModuleSymbolGuidAndAge[60];
} MODULE_SYMBOL_DETAIL, *PMODULE_SYMBOL_DETAIL;
typedef struct _USERMODE_LOADED_MODULE_SYMBOLS
{
    UINT64 BaseAddress;
    UINT64 Entrypoint;
    rune FilePath[260];
} USERMODE_LOADED_MODULE_SYMBOLS, *PUSERMODE_LOADED_MODULE_SYMBOLS;
typedef struct _USERMODE_LOADED_MODULE_DETAILS
{
    UINT32 ProcessId;
    BOOLEAN OnlyCountModules;
    BOOLEAN Is32Bit;
    UINT32 ModulesCount;
    UINT32 Result;
} USERMODE_LOADED_MODULE_DETAILS, *PUSERMODE_LOADED_MODULE_DETAILS;
typedef void (*SymbolMapCallback)(UINT64 Address, char * ModuleName, char * ObjectName, unsigned int ObjectSize);
typedef struct _DEBUGGER_UPDATE_SYMBOL_TABLE
{
    UINT32 TotalSymbols;
    UINT32 CurrentSymbolIndex;
    MODULE_SYMBOL_DETAIL SymbolDetailPacket;
} DEBUGGER_UPDATE_SYMBOL_TABLE, *PDEBUGGER_UPDATE_SYMBOL_TABLE;
typedef struct _DEBUGGEE_SYMBOL_UPDATE_RESULT
{
    UINT64 KernelStatus;
} DEBUGGEE_SYMBOL_UPDATE_RESULT, *PDEBUGGEE_SYMBOL_UPDATE_RESULT;
__declspec(dllimport) BOOLEAN
hyperdbg_u_detect_vmx_support();
__declspec(dllimport) void
hyperdbg_u_read_vendor_string(CHAR *);
__declspec(dllimport) INT
hyperdbg_u_load_vmm();
__declspec(dllimport) INT
hyperdbg_u_unload_vmm();
__declspec(dllimport) INT
hyperdbg_u_install_vmm_driver();
__declspec(dllimport) INT
hyperdbg_u_uninstall_vmm_driver();
__declspec(dllimport) INT
hyperdbg_u_stop_vmm_driver();
__declspec(dllimport) INT
hyperdbg_u_interpreter(CHAR * command);
__declspec(dllimport) void
hyperdbg_u_show_signature();
__declspec(dllimport) void
hyperdbg_u_set_text_message_callback(Callback handler);
__declspec(dllimport) INT
hyperdbg_u_script_read_file_and_execute_commandline(INT argc, CHAR * argv[]);
__declspec(dllimport) BOOLEAN
hyperdbg_u_continue_previous_command();
__declspec(dllimport) BOOLEAN
hyperdbg_u_check_multiline_command(CHAR * current_command, BOOLEAN reset);
__declspec(dllimport) BOOLEAN
hyperdbg_u_set_custom_driver_path(CHAR * driver_file_path, CHAR * driver_name);
__declspec(dllimport) void
hyperdbg_u_use_default_driver_path();
__declspec(dllimport) BOOLEAN
hyperdbg_u_read_memory(UINT64 target_address,
                       DEBUGGER_READ_MEMORY_TYPE memory_type,
                       DEBUGGER_READ_READING_TYPE reading_Type,
                       UINT32 pid,
                       UINT32 size,
                       BOOLEAN get_address_mode,
                       DEBUGGER_READ_MEMORY_ADDRESS_MODE * address_mode,
                       BYTE * target_buffer_to_store,
                       UINT32 * return_length);
__declspec(dllimport) void
hyperdbg_u_show_memory_or_disassemble(DEBUGGER_SHOW_MEMORY_STYLE style,
                                      UINT64 address,
                                      DEBUGGER_READ_MEMORY_TYPE memory_type,
                                      DEBUGGER_READ_READING_TYPE reading_type,
                                      UINT32 pid,
                                      UINT32 size,
                                      PDEBUGGER_DT_COMMAND_OPTIONS dt_details);
__declspec(dllimport) BOOLEAN
hyperdbg_u_read_all_registers(GUEST_REGS * guest_registers, GUEST_EXTRA_REGISTERS * extra_registers);
__declspec(dllimport) BOOLEAN
hyperdbg_u_read_target_register(REGS_ENUM register_id, UINT64 * target_register);
__declspec(dllimport) BOOLEAN
hyperdbg_u_write_target_register(REGS_ENUM register_id, UINT64 value);
__declspec(dllimport) BOOLEAN
hyperdbg_u_show_all_registers();
__declspec(dllimport) BOOLEAN
hyperdbg_u_show_target_register(REGS_ENUM register_id);
__declspec(dllimport) void
hyperdbg_u_connect_local_debugger();
__declspec(dllimport) BOOLEAN
hyperdbg_u_connect_remote_debugger(const CHAR * ip, const CHAR * port);
__declspec(dllimport) void
hyperdbg_u_continue_debuggee();
__declspec(dllimport) void
hyperdbg_u_pause_debuggee();
void
hyperdbg_u_set_breakpoint(UINT64 address, UINT32 pid, UINT32 tid, UINT32 core_numer);
__declspec(dllimport) void*
ScriptEngineParse(char * str);
__declspec(dllimport) void
PrintSymbolBuffer(const void* SymbolBuffer);
__declspec(dllimport) void
PrintSymbol(void* Symbol);
__declspec(dllimport) void
RemoveSymbolBuffer(void* SymbolBuffer);
__declspec(dllimport) BOOLEAN
FuncGetNumberOfOperands(UINT64 FuncType, UINT32 * NumberOfGetOperands, UINT32 * NumberOfSetOperands);
__declspec(dllimport) BOOLEAN
ScriptEngineSetHwdbgInstanceInfo(HWDBG_INSTANCE_INFORMATION * InstancInfo);
__declspec(dllimport) void
ScriptEngineSetTextMessageCallback(void* Handler);
__declspec(dllimport) void
ScriptEngineSymbolAbortLoading();
__declspec(dllimport) UINT64
ScriptEngineConvertNameToAddress(const char * FunctionOrVariableName, PBOOLEAN WasFound);
__declspec(dllimport) UINT32
ScriptEngineLoadFileSymbol(UINT64 BaseAddress, const char * PdbFileName, const char * CustomModuleName);
__declspec(dllimport) UINT32
ScriptEngineUnloadAllSymbols();
__declspec(dllimport) UINT32
ScriptEngineUnloadModuleSymbol(char * ModuleName);
__declspec(dllimport) UINT32
ScriptEngineSearchSymbolForMask(const char * SearchMask);
__declspec(dllimport) BOOLEAN
ScriptEngineGetFieldOffset(CHAR * TypeName, CHAR * FieldName, UINT32 * FieldOffset);
__declspec(dllimport) BOOLEAN
ScriptEngineGetDataTypeSize(CHAR * TypeName, UINT64 * TypeSize);
__declspec(dllimport) BOOLEAN
ScriptEngineCreateSymbolTableForDisassembler(void * CallbackFunction);
__declspec(dllimport) BOOLEAN
ScriptEngineConvertFileToPdbPath(const char * LocalFilePath, char * ResultPath);
__declspec(dllimport) BOOLEAN
ScriptEngineConvertFileToPdbFileAndGuidAndAgeDetails(const char * LocalFilePath, char * PdbFilePath, char * GuidAndAgeDetails, BOOLEAN Is32BitModule);
__declspec(dllimport) BOOLEAN
ScriptEngineSymbolInitLoad(void* BufferToStoreDetails, UINT32 StoredLength, BOOLEAN DownloadIfAvailable, const char * SymbolPath, BOOLEAN IsSilentLoad);
__declspec(dllimport) BOOLEAN
ScriptEngineShowDataBasedOnSymbolTypes(const char * TypeName, UINT64 Address, BOOLEAN IsStruct, void* BufferAddress, const char * AdditionalParameters);
__declspec(dllimport) void
    SymSetTextMessageCallback(void* Handler);
__declspec(dllimport) void
    SymbolAbortLoading();
__declspec(dllimport) UINT64
    SymConvertNameToAddress(const char * FunctionOrVariableName, PBOOLEAN WasFound);
__declspec(dllimport) UINT32
    SymLoadFileSymbol(UINT64 BaseAddress, const char * PdbFileName, const char * CustomModuleName);
__declspec(dllimport) UINT32
    SymUnloadAllSymbols();
__declspec(dllimport) UINT32
    SymUnloadModuleSymbol(char * ModuleName);
__declspec(dllimport) UINT32
    SymSearchSymbolForMask(const char * SearchMask);
__declspec(dllimport) BOOLEAN
    SymGetFieldOffset(CHAR * TypeName, CHAR * FieldName, UINT32 * FieldOffset);
__declspec(dllimport) BOOLEAN
    SymGetDataTypeSize(CHAR * TypeName, UINT64 * TypeSize);
__declspec(dllimport) BOOLEAN
    SymCreateSymbolTableForDisassembler(void * CallbackFunction);
__declspec(dllimport) BOOLEAN
    SymConvertFileToPdbPath(const char * LocalFilePath, char * ResultPath);
__declspec(dllimport) BOOLEAN
    SymConvertFileToPdbFileAndGuidAndAgeDetails(const char * LocalFilePath,
                                                char * PdbFilePath,
                                                char * GuidAndAgeDetails,
                                                BOOLEAN Is32BitModule);
__declspec(dllimport) BOOLEAN
    SymbolInitLoad(void* BufferToStoreDetails,
                   UINT32 StoredLength,
                   BOOLEAN DownloadIfAvailable,
                   const char * SymbolPath,
                   BOOLEAN IsSilentLoad);
__declspec(dllimport) BOOLEAN
    SymShowDataBasedOnSymbolTypes(const char * TypeName,
                                  UINT64 Address,
                                  BOOLEAN IsStruct,
                                  void* BufferAddress,
                                  const char * AdditionalParameters);
__declspec(dllimport) BOOLEAN
    SymQuerySizeof( const char * StructNameOrTypeName, UINT32 * SizeOfField);
__declspec(dllimport) BOOLEAN
    SymCastingQueryForFiledsAndTypes( const char * StructName,
                                          const char * FiledOfStructName,
                                           PBOOLEAN IsStructNamePointerOrNot,
                                           PBOOLEAN IsFiledOfStructNamePointerOrNot,
                                           char ** NewStructOrTypeName,
                                           UINT32 * OffsetOfFieldFromTop,
                                           UINT32 * SizeOfField);
